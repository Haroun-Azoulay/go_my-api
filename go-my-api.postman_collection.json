{
	"info": {
		"_postman_id": "424dc883-7bf1-4b17-be9c-205d17c74d4d",
		"name": "go-my-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26603524"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"Sabr\",\n  \"lastname\": \"Essakori\",\n  \"email\": \"Saber.essakhori@inwi.ma\",\n  \"password\": \"securepassword\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/users",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"Sabr\",\n  \"lastname\": \"Essakori\",\n  \"email\": \"Saber.essakhori@inwi.ma\",\n  \"password\": \"securepassword\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/users",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"Mohammed\",\n  \"lastname\": \"CHakroun\",\n  \"email\": \"Mohammed.charkoun@inwi.ma\",\n  \"password\": \"securepassword\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/users",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Login admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"Sabr\",\n  \"password\": \"securepassword\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/users/login",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"Haroun\",\n  \"password\": \"securepassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/users/login",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get user :id only admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyNzk4NjIxfQ.ohh_wwAwqOq0nSKzELiU91vx4a_f1XEffhXIt7C3ST4"
							}
						},
						"method": "GET",
						"header": [],
						"url": "localhost:8080/api/users/1",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get users only admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:8080/api/users",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update user only admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstname\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/users/5",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data only admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/users/1",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Book",
			"item": [
				{
					"name": "Create book only admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyODEwNjc0fQ.BGqERvxXZHXYGQj-ORp5vH-RUxS5G5Yr4BKrhwNWf2I"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Great Book\",\n    \"author\": \"John Doe\",\n    \"release\": \"2023-11-27T00:00:00Z\",\n    \"resume\": \"An amazing book about great things.\",\n    \"stock\": true,\n    \"price\": 19.99\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/books"
					},
					"response": []
				},
				{
					"name": "Create book 2 only admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyODEwMzE2fQ.BmFUkpQnhXhkj-PUolfChFtuIw0plNrtcPcxICCDQwM"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Mystery of the Lost Island\",\n    \"author\": \"Jane Smith\",\n    \"release\": \"2022-08-15T00:00:00Z\",\n    \"resume\": \"A thrilling adventure to uncover the secrets of a lost island.\",\n    \"stock\": false,\n    \"price\": 29.99\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/books"
					},
					"response": []
				},
				{
					"name": "Get book :id only admin",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyODE0NTI2fQ.WvHqU5O7bawsTgN6B58GQPsxZLf1ns_of4zUga6WZRs"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/books/2"
					},
					"response": []
				},
				{
					"name": "Get books only admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyODEwMzE2fQ.BmFUkpQnhXhkj-PUolfChFtuIw0plNrtcPcxICCDQwM"
							}
						},
						"method": "GET",
						"header": [],
						"url": "localhost:8080/api/books"
					},
					"response": []
				},
				{
					"name": "Get books by title only admin",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyODEwMzE2fQ.BmFUkpQnhXhkj-PUolfChFtuIw0plNrtcPcxICCDQwM"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/books?title=The Great Book",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "title",
									"value": "The Great Book"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get books by title True",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJIYXJvdW4iLCJJc0FkbWluIjpmYWxzZSwiZXhwIjoxNzMyODE2OTU2fQ.cH1Z7roBgYPkrsn6gdfGY0rRxe34aIclZx71rqx5EIA"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/books/guess/search?title=The%20Great%20Book",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books",
								"guess",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "The%20Great%20Book"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get books by title False",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJIYXJvdW4iLCJJc0FkbWluIjpmYWxzZSwiZXhwIjoxNzMyODE2OTU2fQ.cH1Z7roBgYPkrsn6gdfGY0rRxe34aIclZx71rqx5EIA"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/books/guess/search?title=The Mystery of the Lost Island",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books",
								"guess",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "The Mystery of the Lost Island"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get books",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJIYXJvdW4iLCJJc0FkbWluIjpmYWxzZSwiZXhwIjoxNzMyODE2OTU2fQ.cH1Z7roBgYPkrsn6gdfGY0rRxe34aIclZx71rqx5EIA"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/books/guess/search/all"
					},
					"response": []
				},
				{
					"name": "Create book 2 only admin Copy 2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyODEwMzE2fQ.BmFUkpQnhXhkj-PUolfChFtuIw0plNrtcPcxICCDQwM"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Mystery of the Lost Island\",\n    \"author\": \"Jane Smith\",\n    \"release\": \"2022-08-15T00:00:00Z\",\n    \"resume\": \"A thrilling adventure to uncover the secrets of a lost island.\",\n    \"stock\": false,\n    \"price\": 29.99\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/books"
					},
					"response": []
				},
				{
					"name": "Update book only admin",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"test\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8080/api/books/1"
					},
					"response": []
				},
				{
					"name": "Update book only admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUNiIsInR5cCI6IkpXVCJ9.eyJGaXJzdG5hbWUiOiJTYWJyIiwiSXNBZG1pbiI6dHJ1ZSwiZXhwIjoxNzMyODEwNjc0fQ.BGqERvxXZHXYGQj-ORp5vH-RUxS5G5Yr4BKrhwNWf2I"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "localhost:8080/api/books/1"
					},
					"response": []
				}
			]
		},
		{
			"name": "Monitoring",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "localhost:8080/ping",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		}
	]
}